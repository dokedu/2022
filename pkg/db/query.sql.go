// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package db

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (organisation_id, user_id, name, description)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, user_id, organisation_id, created_at, deleted_at
`

type CreateTaskParams struct {
	OrganisationID string `json:"organisationID"`
	UserID         string `json:"userID"`
	Name           string `json:"name"`
	Description    string `json:"description"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.OrganisationID,
		arg.UserID,
		arg.Name,
		arg.Description,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getOrganisationByID = `-- name: GetOrganisationByID :one
SELECT id, name, owner_id, created_at, deleted_at
FROM organisations
WHERE id = $1
`

func (q *Queries) GetOrganisationByID(ctx context.Context, id string) (Organisation, error) {
	row := q.db.QueryRowContext(ctx, getOrganisationByID, id)
	var i Organisation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, name, description, user_id, organisation_id, created_at, deleted_at
FROM tasks
WHERE id = $1
  AND organisation_id = $2
`

type GetTaskByIDParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisationID"`
}

func (q *Queries) GetTaskByID(ctx context.Context, arg GetTaskByIDParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, arg.ID, arg.OrganisationID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTasksByUserID = `-- name: GetTasksByUserID :many
SELECT id, name, description, user_id, organisation_id, created_at, deleted_at
FROM tasks
WHERE user_id = $1
  AND organisation_id = $2
`

type GetTasksByUserIDParams struct {
	UserID         string `json:"userID"`
	OrganisationID string `json:"organisationID"`
}

func (q *Queries) GetTasksByUserID(ctx context.Context, arg GetTasksByUserIDParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserID, arg.UserID, arg.OrganisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, role, organisation_id, name, email, password, created_at, deleted_at
FROM users
WHERE id = $1
  AND organisation_id = $2
`

type GetUserByIDParams struct {
	ID             string `json:"id"`
	OrganisationID string `json:"organisationID"`
}

func (q *Queries) GetUserByID(ctx context.Context, arg GetUserByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, arg.ID, arg.OrganisationID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Role,
		&i.OrganisationID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, name, description, user_id, organisation_id, created_at, deleted_at
FROM tasks
WHERE organisation_id = $1
`

func (q *Queries) ListTasks(ctx context.Context, organisationID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.OrganisationID,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, role, organisation_id, name, email, password, created_at, deleted_at
FROM users
WHERE organisation_id = $1
`

func (q *Queries) ListUsers(ctx context.Context, organisationID string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, organisationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Role,
			&i.OrganisationID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name        = $1,
    description = $2
WHERE id = $3
  AND organisation_id = $4
RETURNING id, name, description, user_id, organisation_id, created_at, deleted_at
`

type UpdateTaskParams struct {
	Name           string `json:"name"`
	Description    string `json:"description"`
	ID             string `json:"id"`
	OrganisationID string `json:"organisationID"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Name,
		arg.Description,
		arg.ID,
		arg.OrganisationID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UserID,
		&i.OrganisationID,
		&i.CreatedAt,
		&i.DeletedAt,
	)
	return i, err
}
