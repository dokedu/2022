package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"example/pkg/db"
	"example/pkg/graph/model"
)

var orgId = "vTLyQPq-eXk_aHQuKw47A"
var userId = "00f_dsi0rH1bR4kGMPmPY"

// CreateTask is the resolver for the createTask field.
func (r *mutationResolver) CreateTask(ctx context.Context, input model.CreateTaskInput) (*db.Task, error) {
	task, err := r.DB.CreateTask(ctx, db.CreateTaskParams{
		OrganisationID: orgId,
		UserID:         userId,
		Name:           input.Name,
		Description:    input.Description,
	})

	if err != nil {
		return nil, err
	}

	return &task, nil
}

// UpdateTask is the resolver for the updateTask field.
func (r *mutationResolver) UpdateTask(ctx context.Context, input model.UpdateTaskInput) (*db.Task, error) {
	task, err := r.DB.UpdateTask(ctx, db.UpdateTaskParams{
		Name:           *input.Name,
		Description:    *input.Description,
		ID:             input.ID,
		OrganisationID: orgId,
	})

	if err != nil {
		return nil, err
	}

	return &task, nil

}

// Owner is the resolver for the owner field.
func (r *organisationResolver) Owner(ctx context.Context, obj *db.Organisation) (*db.User, error) {
	user, err := r.DB.GetUserByID(ctx, db.GetUserByIDParams{
		ID:             obj.OwnerID,
		OrganisationID: obj.ID,
	})

	if err != nil {
		return nil, err
	}

	return &user, nil
}

// Users is the resolver for the users field.
func (r *organisationResolver) Users(ctx context.Context, obj *db.Organisation) (*model.UserConnection, error) {
	users, err := r.DB.ListUsers(ctx, obj.ID)

	if err != nil {
		return nil, err
	}

	// return users as model.UserEdge
	edges := make([]*model.UserEdge, len(users))

	return &model.UserConnection{
		Edges:      edges,
		PageInfo:   nil,
		TotalCount: 0,
	}, nil
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context, first *int, after *string, last *int, before *string) (*model.TaskConnection, error) {
	tasks, err := r.DB.ListTasks(ctx, orgId)
	if err != nil {
		return nil, err
	}

	// return tasks as model.TaskEdge
	edges := make([]*model.TaskEdge, len(tasks))

	// add tasks to edges
	for i, task := range tasks {
		node := task
		edges[i] = &model.TaskEdge{
			Cursor: "",
			Node:   &node,
		}
	}

	return &model.TaskConnection{
		Edges:      edges,
		PageInfo:   nil,
		TotalCount: 0,
	}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, first *int, after *string, last *int, before *string) (*model.UserConnection, error) {
	users, err := r.DB.ListUsers(ctx, orgId)

	if err != nil {
		return nil, err
	}

	// return users as model.UserEdge
	edges := make([]*model.UserEdge, len(users))

	// add users to edges
	for i, user := range users {
		node := user
		edges[i] = &model.UserEdge{
			Cursor: "",
			Node:   &node,
		}
	}

	return &model.UserConnection{
		Edges:      edges,
		PageInfo:   nil,
		TotalCount: 0,
	}, nil
}

// User is the resolver for the user field.
func (r *taskResolver) User(ctx context.Context, obj *db.Task) (*db.User, error) {
	user, err := r.DB.GetUserByID(ctx, db.GetUserByIDParams{
		ID:             obj.UserID,
		OrganisationID: orgId,
	})

	if err != nil {
		return nil, err
	}

	return &user, nil
}

// Tasks is the resolver for the tasks field.
func (r *userResolver) Tasks(ctx context.Context, obj *db.User) (*model.TaskConnection, error) {
	tasks, err := r.DB.ListTasks(ctx, orgId)

	if err != nil {
		return nil, err
	}

	// return tasks as model.TaskEdge
	edges := make([]*model.TaskEdge, len(tasks))

	// add tasks to edges
	for i, task := range tasks {
		node := task
		edges[i] = &model.TaskEdge{
			Cursor: "",
			Node:   &node,
		}
	}

	return &model.TaskConnection{
		Edges:      edges,
		TotalCount: 0,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Organisation returns OrganisationResolver implementation.
func (r *Resolver) Organisation() OrganisationResolver { return &organisationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Task returns TaskResolver implementation.
func (r *Resolver) Task() TaskResolver { return &taskResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type organisationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type taskResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
