// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type UserRole string

const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
	UserRoleGuest UserRole = "guest"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type Organisation struct {
	ID        string       `json:"id"`
	Name      string       `json:"name"`
	OwnerID   string       `json:"ownerID"`
	CreatedAt time.Time    `json:"createdAt"`
	DeletedAt sql.NullTime `json:"deletedAt"`
}

type Task struct {
	ID             string       `json:"id"`
	Name           string       `json:"name"`
	Description    string       `json:"description"`
	UserID         string       `json:"userID"`
	OrganisationID string       `json:"organisationID"`
	CreatedAt      time.Time    `json:"createdAt"`
	DeletedAt      sql.NullTime `json:"deletedAt"`
}

type User struct {
	ID             string       `json:"id"`
	Role           UserRole     `json:"role"`
	OrganisationID string       `json:"organisationID"`
	Name           string       `json:"name"`
	Email          string       `json:"email"`
	Password       string       `json:"password"`
	CreatedAt      time.Time    `json:"createdAt"`
	DeletedAt      sql.NullTime `json:"deletedAt"`
}
