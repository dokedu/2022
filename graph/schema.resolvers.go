package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.29

import (
	"context"
	"database/sql"
	"example/graph/model"
	jwt2 "example/pkg/jwt"
	"fmt"
	nanoid "github.com/matoous/go-nanoid/v2"
	"time"
)

// Color is the resolver for the color field.
func (r *competenceResolver) Color(ctx context.Context, obj *model.Competence) (*string, error) {
	panic(fmt.Errorf("not implemented: Color - color"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *competenceResolver) DeletedAt(ctx context.Context, obj *model.Competence) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// Parents is the resolver for the parents field.
func (r *competenceResolver) Parents(ctx context.Context, obj *model.Competence) ([]*model.Competence, error) {
	panic(fmt.Errorf("not implemented: Parents - parents"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *entryResolver) DeletedAt(ctx context.Context, obj *model.Entry) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *entryEventResolver) DeletedAt(ctx context.Context, obj *model.EntryEvent) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *entryFileResolver) DeletedAt(ctx context.Context, obj *model.EntryFile) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *entryTagResolver) DeletedAt(ctx context.Context, obj *model.EntryTag) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *entryUserResolver) DeletedAt(ctx context.Context, obj *model.EntryUser) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *entryUserCompetenceResolver) DeletedAt(ctx context.Context, obj *model.EntryUserCompetence) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *eventResolver) DeletedAt(ctx context.Context, obj *model.Event) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *eventCompetenceResolver) DeletedAt(ctx context.Context, obj *model.EventCompetence) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, input model.SignInInput) (*model.SignInPayload, error) {
	// TODO: Implement

	// if email is max@dokedu.org and password is password then return token
	if input.Email == "max@dokedu.org" && input.Password == "password" {
		id, _ := nanoid.New()

		user := &model.User{
			ID:        id,
			Role:      "admin",
			Email:     input.Email,
			FirstName: "Max",
			LastName:  "Mustermann",
			CreatedAt: time.Time{},
			DeletedAt: sql.NullTime{
				Time:  time.Time{},
				Valid: false,
			},
		}

		claims := jwt2.NewClaims(*user)

		jwt, _ := jwt2.Signer{}.Sign(claims)

		return &model.SignInPayload{
			Token: jwt,
		}, nil
	}

	panic(fmt.Errorf("wrong email or password"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *organisationResolver) DeletedAt(ctx context.Context, obj *model.Organisation) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// Users is the resolver for the users field.
func (r *organisationResolver) Users(ctx context.Context, obj *model.Organisation) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Competences is the resolver for the competences field.
func (r *organisationResolver) Competences(ctx context.Context, obj *model.Organisation) ([]*model.Competence, error) {
	panic(fmt.Errorf("not implemented: Competences - competences"))
}

// Organisation is the resolver for the organisation field.
func (r *queryResolver) Organisation(ctx context.Context) (*model.Organisation, error) {
	panic(fmt.Errorf("not implemented: Organisation - organisation"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users := []*model.User{
		{
			ID:        "1",
			FirstName: "John",
			LastName:  "Doe",
			Email:     "john@dokedu.org",
		},
	}

	return users, nil
}

// Competences is the resolver for the competences field.
func (r *queryResolver) Competences(ctx context.Context) ([]*model.Competence, error) {
	panic(fmt.Errorf("not implemented: Competences - competences"))
}

// Report is the resolver for the report field.
func (r *queryResolver) Report(ctx context.Context, id string) (*model.Report, error) {
	panic(fmt.Errorf("not implemented: Report - report"))
}

// Reports is the resolver for the reports field.
func (r *queryResolver) Reports(ctx context.Context) ([]*model.Report, error) {
	panic(fmt.Errorf("not implemented: Reports - reports"))
}

// Entry is the resolver for the entry field.
func (r *queryResolver) Entry(ctx context.Context, id string) (*model.Entry, error) {
	panic(fmt.Errorf("not implemented: Entry - entry"))
}

// Entries is the resolver for the entries field.
func (r *queryResolver) Entries(ctx context.Context) ([]*model.Entry, error) {
	panic(fmt.Errorf("not implemented: Entries - entries"))
}

// EntryUserCompetence is the resolver for the entryUserCompetence field.
func (r *queryResolver) EntryUserCompetence(ctx context.Context, id string) (*model.EntryUserCompetence, error) {
	panic(fmt.Errorf("not implemented: EntryUserCompetence - entryUserCompetence"))
}

// EntryUserCompetences is the resolver for the entryUserCompetences field.
func (r *queryResolver) EntryUserCompetences(ctx context.Context) ([]*model.EntryUserCompetence, error) {
	panic(fmt.Errorf("not implemented: EntryUserCompetences - entryUserCompetences"))
}

// EntryUser is the resolver for the entryUser field.
func (r *queryResolver) EntryUser(ctx context.Context, id string) (*model.EntryUser, error) {
	panic(fmt.Errorf("not implemented: EntryUser - entryUser"))
}

// EntryUsers is the resolver for the entryUsers field.
func (r *queryResolver) EntryUsers(ctx context.Context) ([]*model.EntryUser, error) {
	panic(fmt.Errorf("not implemented: EntryUsers - entryUsers"))
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (*model.Tag, error) {
	panic(fmt.Errorf("not implemented: Tag - tag"))
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]*model.Tag, error) {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// EntryTag is the resolver for the entryTag field.
func (r *queryResolver) EntryTag(ctx context.Context, id string) (*model.EntryTag, error) {
	panic(fmt.Errorf("not implemented: EntryTag - entryTag"))
}

// EntryTags is the resolver for the entryTags field.
func (r *queryResolver) EntryTags(ctx context.Context) ([]*model.EntryTag, error) {
	panic(fmt.Errorf("not implemented: EntryTags - entryTags"))
}

// Event is the resolver for the event field.
func (r *queryResolver) Event(ctx context.Context, id string) (*model.Event, error) {
	panic(fmt.Errorf("not implemented: Event - event"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*model.Event, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// EntryEvent is the resolver for the entryEvent field.
func (r *queryResolver) EntryEvent(ctx context.Context, id string) (*model.EntryEvent, error) {
	panic(fmt.Errorf("not implemented: EntryEvent - entryEvent"))
}

// EntryEvents is the resolver for the entryEvents field.
func (r *queryResolver) EntryEvents(ctx context.Context) ([]*model.EntryEvent, error) {
	panic(fmt.Errorf("not implemented: EntryEvents - entryEvents"))
}

// EntryFile is the resolver for the entryFile field.
func (r *queryResolver) EntryFile(ctx context.Context, id string) (*model.EntryFile, error) {
	panic(fmt.Errorf("not implemented: EntryFile - entryFile"))
}

// EntryFiles is the resolver for the entryFiles field.
func (r *queryResolver) EntryFiles(ctx context.Context) ([]*model.EntryFile, error) {
	panic(fmt.Errorf("not implemented: EntryFiles - entryFiles"))
}

// EventCompetence is the resolver for the eventCompetence field.
func (r *queryResolver) EventCompetence(ctx context.Context, id string) (*model.EventCompetence, error) {
	panic(fmt.Errorf("not implemented: EventCompetence - eventCompetence"))
}

// EventCompetences is the resolver for the eventCompetences field.
func (r *queryResolver) EventCompetences(ctx context.Context) ([]*model.EventCompetence, error) {
	panic(fmt.Errorf("not implemented: EventCompetences - eventCompetences"))
}

// Meta is the resolver for the meta field.
func (r *reportResolver) Meta(ctx context.Context, obj *model.Report) (*string, error) {
	panic(fmt.Errorf("not implemented: Meta - meta"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *reportResolver) DeletedAt(ctx context.Context, obj *model.Report) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *tagResolver) DeletedAt(ctx context.Context, obj *model.Tag) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// DeletedAt is the resolver for the deletedAt field.
func (r *userResolver) DeletedAt(ctx context.Context, obj *model.User) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: DeletedAt - deletedAt"))
}

// Competence returns CompetenceResolver implementation.
func (r *Resolver) Competence() CompetenceResolver { return &competenceResolver{r} }

// Entry returns EntryResolver implementation.
func (r *Resolver) Entry() EntryResolver { return &entryResolver{r} }

// EntryEvent returns EntryEventResolver implementation.
func (r *Resolver) EntryEvent() EntryEventResolver { return &entryEventResolver{r} }

// EntryFile returns EntryFileResolver implementation.
func (r *Resolver) EntryFile() EntryFileResolver { return &entryFileResolver{r} }

// EntryTag returns EntryTagResolver implementation.
func (r *Resolver) EntryTag() EntryTagResolver { return &entryTagResolver{r} }

// EntryUser returns EntryUserResolver implementation.
func (r *Resolver) EntryUser() EntryUserResolver { return &entryUserResolver{r} }

// EntryUserCompetence returns EntryUserCompetenceResolver implementation.
func (r *Resolver) EntryUserCompetence() EntryUserCompetenceResolver {
	return &entryUserCompetenceResolver{r}
}

// Event returns EventResolver implementation.
func (r *Resolver) Event() EventResolver { return &eventResolver{r} }

// EventCompetence returns EventCompetenceResolver implementation.
func (r *Resolver) EventCompetence() EventCompetenceResolver { return &eventCompetenceResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Organisation returns OrganisationResolver implementation.
func (r *Resolver) Organisation() OrganisationResolver { return &organisationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Report returns ReportResolver implementation.
func (r *Resolver) Report() ReportResolver { return &reportResolver{r} }

// Tag returns TagResolver implementation.
func (r *Resolver) Tag() TagResolver { return &tagResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type competenceResolver struct{ *Resolver }
type entryResolver struct{ *Resolver }
type entryEventResolver struct{ *Resolver }
type entryFileResolver struct{ *Resolver }
type entryTagResolver struct{ *Resolver }
type entryUserResolver struct{ *Resolver }
type entryUserCompetenceResolver struct{ *Resolver }
type eventResolver struct{ *Resolver }
type eventCompetenceResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type organisationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type reportResolver struct{ *Resolver }
type tagResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
