# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time

type Organisation {
    id: ID!
    name: String!
    owner: User!
    createdAt: Time!
    deletedAt: Time

    users: [User]
    competences: [Competence]
}

enum UserRole {
    OWNER
    ADMIN
    TEACHER
    EDUCATOR
    STUDENT
}

type User {
    id: ID!
    role: UserRole!
    firstName: String!
    lastName: String!
    email: String!
    createdAt: Time!
    deletedAt: Time
}

type Competence {
    id: ID!
    name: String!
    grades: [Int!]!
    color: String
    createdAt: Time!
    deletedAt: Time

    parents: [Competence!]!
}

enum ReportStatus {
    PENDING
    PROCESSING
    DONE
    ERROR
}

enum ReportType {
    REPORTS
    SUBJECTS
    REPORT_DOCX
    SUBJECTS_DOCX
}

type Report {
    id: ID!
    status: ReportStatus!
    type: ReportType!
    user: User!
    filterTags: [String!]!
    studentUser: User!
    from: Time!
    to: Time!
    meta: String
    createdAt: Time!
    deletedAt: Time
}

type Entry {
    id: ID!
    date: Time!
    body: String!
    user: User!
    createdAt: Time!
    deletedAt: Time

    entryTags: [EntryTag!]!
    entryFiles: [EntryFile!]!
    entryEvents: [EntryEvent!]!
    entryUsers: [EntryUser!]!
    entryUserCompetences: [EntryUserCompetence!]!
}

type EntryUserCompetence {
    id: ID!
    level: Int!
    user: User!
    entry: Entry!
    competence: Competence!
    createdAt: Time!
    deletedAt: Time
}

type EntryUser {
    id: ID!
    entry: Entry!
    user: User!
    createdAt: Time!
    deletedAt: Time
}

type Tag {
    id: ID!
    name: String!
    createdAt: Time!
    deletedAt: Time
}

type EntryTag {
    id: ID!
    entry: Entry!
    tag: Tag!
    createdAt: Time!
    deletedAt: Time
}

type Event {
    id: ID!
    title: String!
    body: String!
    startsAt: Time!
    endsAt: Time!
    createdAt: Time!
    deletedAt: Time
}
type EntryEvent {
    id: ID!
    entry: Entry!
    event: Event!
    createdAt: Time!
    deletedAt: Time
}

type EntryFile {
    id: ID!
    entry: Entry!
    fileBucketId: String!
    fileName: String!
    createdAt: Time!
    deletedAt: Time
}

type EventCompetence {
    id: ID!
    event: Event!
    competence: Competence!
    createdAt: Time!
    deletedAt: Time
}

type Query {
    organisation: Organisation!
    user(id: ID!): User!
    users: [User!]!
    competences: [Competence!]!
    report(id: ID!): Report!
    reports: [Report!]!
    entry(id: ID!): Entry!
    entries: [Entry!]!
    entryUserCompetence(id: ID!): EntryUserCompetence!
    entryUserCompetences: [EntryUserCompetence!]!
    entryUser(id: ID!): EntryUser!
    entryUsers: [EntryUser!]!
    tag(id: ID!): Tag!
    tags: [Tag!]!
    entryTag(id: ID!): EntryTag!
    entryTags: [EntryTag!]!
    event(id: ID!): Event!
    events: [Event!]!
    entryEvent(id: ID!): EntryEvent!
    entryEvents: [EntryEvent!]!
    entryFile(id: ID!): EntryFile!
    entryFiles: [EntryFile!]!
    eventCompetence(id: ID!): EventCompetence!
    eventCompetences: [EventCompetence!]!
}

input SignInInput {
    email: String!
    password: String!
}

type SignInPayload {
    token: String! # JWT
}

type Mutation {
    signIn(input: SignInInput!): SignInPayload!
}